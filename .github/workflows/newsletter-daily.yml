name: Daily Newsletter (Actions)

on:
  schedule:
    # Check twice per hour; gate to 1–5 random slots/day
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write  # needed to push using GITHUB_TOKEN

# Prevent overlapping/queued runs. New run cancels the in-progress one.
concurrency:
  group: newsletter-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-newsletter:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SLOTS_PER_DAY: "48"   # number of half-hour slots per day

    steps:
      - name: Decide if this slot should run (1–5 random runs/day)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          TODAY_UTC="$(date -u +'%Y-%m-%d')"
          HOUR="$(date -u +'%H')"
          MIN="$(date -u +'%M')"

          # Current half-hour slot index (0..47)
          if [ "$MIN" -ge 30 ]; then
            CUR_SLOT=$((10#$HOUR * 2 + 1))
          else
            CUR_SLOT=$((10#$HOUR * 2))
          fi

          # Deterministic daily seed from date + repo
          SEED_HEX="$(printf '%s|%s' "$TODAY_UTC" "${GITHUB_REPOSITORY}" | sha256sum | cut -c1-8)"
          SEED=$((16#$SEED_HEX))

          # 1..5 runs per day
          TARGET_RUNS=$(( SEED % 5 + 1 ))

          # Simple LCG PRNG
          lcg_next () {
            SEED=$(( (1103515245 * SEED + 12345) % 2147483647 ))
            echo $SEED
          }

          # Pick unique half-hour slots
          declare -A PICKED=()
          SELECTED_SLOTS=()
          while [ ${#SELECTED_SLOTS[@]} -lt $TARGET_RUNS ]; do
            R=$(lcg_next)
            SLOT=$(( R % ${SLOTS_PER_DAY} ))
            if [ -z "${PICKED[$SLOT]+x}" ]; then
              PICKED[$SLOT]=1
              SELECTED_SLOTS+=("$SLOT")
            fi
          done

          # Sort to know the earliest slot
          IFS=$'\n' SORTED=($(printf '%s\n' "${SELECTED_SLOTS[@]}" | sort -n))
          FIRST_SLOT="${SORTED[0]}"

          SHOULD_RUN="false"
          for s in "${SELECTED_SLOTS[@]}"; do
            if [ "$s" = "$CUR_SLOT" ]; then
              SHOULD_RUN="true"
              break
            fi
          done

          echo "TODAY_UTC=$TODAY_UTC"       >> "$GITHUB_ENV"
          echo "FIRST_SLOT=$FIRST_SLOT"     >> "$GITHUB_ENV"
          echo "CUR_SLOT=$CUR_SLOT"         >> "$GITHUB_ENV"
          echo "SHOULD_RUN=$SHOULD_RUN"     >> "$GITHUB_ENV"

          echo "Today (UTC): $TODAY_UTC"
          echo "Target runs: $TARGET_RUNS"
          echo "Selected slots: ${SELECTED_SLOTS[*]}"
          echo "Current slot: $CUR_SLOT | First slot: $FIRST_SLOT | Run now? $SHOULD_RUN"

      - name: Checkout repository
        if: env.SHOULD_RUN == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
          registry-url: 'https://registry.npmjs.org'
          always-auth: false

      - name: Force public npm registry only (no tokens)
        if: env.SHOULD_RUN == 'true'
        run: |
          rm -f ~/.npmrc .npmrc || true
          printf "registry=https://registry.npmjs.org/\nalways-auth=false\n" > .npmrc
          echo "Effective registry: $(npm config get registry)"
          # Bound the ping so it can't hang
          timeout 20s npm ping || echo "npm ping timed out (continuing)"

      - name: Inspect lockfile registries and tarballs
        if: env.SHOULD_RUN == 'true'
        run: |
          if [ -f package-lock.json ]; then
            echo "=== URLs found in package-lock.json ==="
            URLS=$(grep -EO '"resolved":\s*"https?://[^"]+' package-lock.json | sed -E 's/^"resolved":\s*"//' | sort -u || true)
            [ -n "$URLS" ] && echo "$URLS" || echo "(no resolved URLs found)"
            echo "=== Non-npmjs URLs (should be empty) ==="
            NON_NPM=$(echo "$URLS" | grep -v 'registry\.npmjs\.org' || true)
            if [ -n "$NON_NPM" ]; then
              echo "$NON_NPM"
              echo "::error::Lockfile references non-public registries or private tarballs. Please fix your deps."
              exit 1
            fi
          else
            echo "::warning::No package-lock.json found; caching and reproducible installs will be limited."
          fi

      - name: Install dependencies
        if: env.SHOULD_RUN == 'true'
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

      - name: Run newsletter update script
        if: env.SHOULD_RUN == 'true'
        run: node src/updateNewsletter.js

      - name: Commit and push if changed (with daily heartbeat)
        if: env.SHOULD_RUN == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.email "contato@lucascaixeta.com"
          git config user.name "Lucas Caixeta"
          git add README.md || true

          if ! git diff --quiet --cached; then
            git commit -m "Update newsletter for ${TODAY_UTC}"
            git push
            exit 0
          fi

          # Create a once-per-day heartbeat commit at the earliest selected slot
          if [ "${CUR_SLOT}" = "${FIRST_SLOT}" ]; then
            mkdir -p .github
            printf "Heartbeat: %s %s UTC\n" "${TODAY_UTC}" "$(date -u +'%H:%M')" > .github/daily-heartbeat.txt
            git add .github/daily-heartbeat.txt
            git commit -m "Daily heartbeat for ${TODAY_UTC}"
            git push
            echo "Heartbeat commit created."
          else
            echo "No content changes and not earliest slot — skipping commit."
          fi
